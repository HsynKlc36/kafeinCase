// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NETDeveloperCaseStudy.DataAccess.Contexts;

#nullable disable

namespace NETDeveloperCaseStudy.DataAccess.Migrations
{
    [DbContext(typeof(CaseStudyWebApiDbContext))]
    [Migration("20240517113314_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "44373552-14c7-43ca-92bd-1691176fd2ae",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2a904221-6086-469f-99e1-0e6ece5c66e5",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Core.Entities.BaseIdentities.ExtendedIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(3775),
                            Name = "Üst Giyim",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("47f0cacd-7e44-4989-8eee-2ba09e470abd"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(3793),
                            Name = "Dış Giyim",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("40e576f2-63c3-45eb-827f-389113dcdfd4"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(3797),
                            Name = "Alt Giyim",
                            Status = (byte)4
                        });
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("PhoneNumber");

                    b.ToTable("Markets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Address = "İSTANBUL/Bostancı",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(9841),
                            Name = "A",
                            PhoneNumber = "05555555555",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Address = "İSTANBUL/Suadiye",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(9848),
                            Name = "B",
                            PhoneNumber = "05555555554",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Address = "İSTANBUL/Etiler",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 694, DateTimeKind.Local).AddTicks(9852),
                            Name = "C",
                            PhoneNumber = "05555555553",
                            Status = (byte)4
                        });
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasAlternateKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasFilter("[BARCODE] IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a6f4b52-35fc-4691-9b58-a932cb1fe98d"),
                            Barcode = "45123984756234",
                            Brand = "Zara",
                            CategoryId = new Guid("47f0cacd-7e44-4989-8eee-2ba09e470abd"),
                            Color = "Brown",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1570),
                            Name = "Kaban",
                            Size = "XL",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("efa0763a-de8e-44f2-a42b-d14727974b7d"),
                            Barcode = "89347210957368",
                            Brand = "Mavi",
                            CategoryId = new Guid("40e576f2-63c3-45eb-827f-389113dcdfd4"),
                            Color = "Blue",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1578),
                            Name = "Kot Pantolon",
                            Size = "38",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("bd60de37-ebd9-4174-a085-6c29c2991643"),
                            Barcode = "16734029856127",
                            Brand = "Lacoste",
                            CategoryId = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            Color = "Pink",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1582),
                            Name = "Kazak",
                            Size = "XS",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("9ff60759-1df3-4762-833f-9c039ce3dd3c"),
                            Barcode = "23894571028356",
                            Brand = "Vakko",
                            CategoryId = new Guid("47f0cacd-7e44-4989-8eee-2ba09e470abd"),
                            Color = "Black",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1586),
                            Name = "Ceket",
                            Size = "L",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("63966b3c-dfa3-4d04-9ac0-c6435b1c1501"),
                            Barcode = "48590123764580",
                            Brand = "Boyner",
                            CategoryId = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            Color = "White",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1590),
                            Name = "Tişört",
                            Size = "2XL",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("74b1fa9a-79bb-4b75-9c53-eee57c75e257"),
                            Barcode = "34028571903428",
                            Brand = "H&M",
                            CategoryId = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            Color = "Beige",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1593),
                            Name = "Bluz",
                            Size = "S",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("532d0f81-9385-4cef-9a6a-46fc3c9fb65b"),
                            Barcode = "92837461029834",
                            Brand = "Calvin Klein",
                            CategoryId = new Guid("40e576f2-63c3-45eb-827f-389113dcdfd4"),
                            Color = "Khaki",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1595),
                            Name = "Kumaş Pantolon",
                            Size = "36",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("a1e205d0-20ee-40e5-8e4c-e1164cca866e"),
                            Barcode = "71234569018237",
                            Brand = "Nike",
                            CategoryId = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            Color = "Blue",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1598),
                            Name = "Tişört",
                            Size = "2XL",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("e8e6c63e-5054-4d9b-8f40-7d39865c81f5"),
                            Barcode = "56348091283749",
                            Brand = "Adidas",
                            CategoryId = new Guid("40e576f2-63c3-45eb-827f-389113dcdfd4"),
                            Color = "Red",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1601),
                            Name = "Şort",
                            Size = "40",
                            Status = (byte)4
                        },
                        new
                        {
                            Id = new Guid("085aeff8-9d2a-49f5-bc7d-1d4efa55a16f"),
                            Barcode = "49018237451028",
                            Brand = "U.S. Polo Assn",
                            CategoryId = new Guid("972c7033-09ab-4dd7-97d7-4b1e892a77bb"),
                            Color = "White",
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(1607),
                            Name = "Gömlek",
                            Size = "XL",
                            Status = (byte)4
                        });
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.ProductMarket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("ProductId", "MarketId");

                    b.HasIndex("MarketId");

                    b.ToTable("ProductMarkets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09051a37-5408-414d-8eb7-b814e02c77af"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6033),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Price = 950.00m,
                            ProductId = new Guid("2a6f4b52-35fc-4691-9b58-a932cb1fe98d"),
                            Status = (byte)4,
                            Stock = 1000
                        },
                        new
                        {
                            Id = new Guid("d000e58c-ad7e-4569-a3c2-fda50d86a3ce"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6041),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Price = 600.00m,
                            ProductId = new Guid("efa0763a-de8e-44f2-a42b-d14727974b7d"),
                            Status = (byte)4,
                            Stock = 2800
                        },
                        new
                        {
                            Id = new Guid("73ad54bc-4c4e-405b-9ee8-51f3b5563eb0"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6045),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Price = 200.00m,
                            ProductId = new Guid("63966b3c-dfa3-4d04-9ac0-c6435b1c1501"),
                            Status = (byte)4,
                            Stock = 1400
                        },
                        new
                        {
                            Id = new Guid("00889c8f-3a4d-443a-8886-d70cba842432"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6048),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Price = 700.00m,
                            ProductId = new Guid("532d0f81-9385-4cef-9a6a-46fc3c9fb65b"),
                            Status = (byte)4,
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("ba34a343-25eb-4132-8a6c-5d98ae6d9257"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6051),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("266acab2-0fac-49e8-99e0-86da42d6cdc7"),
                            Price = 890.00m,
                            ProductId = new Guid("9ff60759-1df3-4762-833f-9c039ce3dd3c"),
                            Status = (byte)4,
                            Stock = 1200
                        },
                        new
                        {
                            Id = new Guid("18dcdd57-9952-4cb2-ac42-454221084102"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6054),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Price = 980.00m,
                            ProductId = new Guid("2a6f4b52-35fc-4691-9b58-a932cb1fe98d"),
                            Status = (byte)4,
                            Stock = 1500
                        },
                        new
                        {
                            Id = new Guid("93845ffc-ef01-4ad1-b3af-009c32a729f5"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6057),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Price = 580.00m,
                            ProductId = new Guid("efa0763a-de8e-44f2-a42b-d14727974b7d"),
                            Status = (byte)4,
                            Stock = 1000
                        },
                        new
                        {
                            Id = new Guid("b7c5ffce-f424-461f-b19b-186b3a38d93d"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6060),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Price = 220.00m,
                            ProductId = new Guid("63966b3c-dfa3-4d04-9ac0-c6435b1c1501"),
                            Status = (byte)4,
                            Stock = 1300
                        },
                        new
                        {
                            Id = new Guid("9f729c2e-be26-42a0-8c97-5586f7ccc48e"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6063),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Price = 620.00m,
                            ProductId = new Guid("085aeff8-9d2a-49f5-bc7d-1d4efa55a16f"),
                            Status = (byte)4,
                            Stock = 3000
                        },
                        new
                        {
                            Id = new Guid("315e8b4b-f028-414a-8ca3-47c50462cc19"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6066),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("d3c7760f-6166-4058-a343-9c6870ac391d"),
                            Price = 900.00m,
                            ProductId = new Guid("9ff60759-1df3-4762-833f-9c039ce3dd3c"),
                            Status = (byte)4,
                            Stock = 1200
                        },
                        new
                        {
                            Id = new Guid("bbaf299a-8c38-4e85-950f-a999bcb48c00"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6069),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Price = 990.00m,
                            ProductId = new Guid("2a6f4b52-35fc-4691-9b58-a932cb1fe98d"),
                            Status = (byte)4,
                            Stock = 800
                        },
                        new
                        {
                            Id = new Guid("781165ab-95dd-4fb7-a5b2-f90d573178f3"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6072),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Price = 565.00m,
                            ProductId = new Guid("efa0763a-de8e-44f2-a42b-d14727974b7d"),
                            Status = (byte)4,
                            Stock = 1350
                        },
                        new
                        {
                            Id = new Guid("b982c629-7f10-4029-a3c0-ec7c6aadf1c8"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6075),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Price = 190.00m,
                            ProductId = new Guid("63966b3c-dfa3-4d04-9ac0-c6435b1c1501"),
                            Status = (byte)4,
                            Stock = 1950
                        },
                        new
                        {
                            Id = new Guid("7d3f26ba-bca4-46f0-80c9-c51636fe04c1"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6078),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Price = 740.00m,
                            ProductId = new Guid("532d0f81-9385-4cef-9a6a-46fc3c9fb65b"),
                            Status = (byte)4,
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("b4df6955-efa5-4fc7-b13c-47011201bb20"),
                            CreatedBy = "NotFound-User",
                            CreatedDate = new DateTime(2024, 5, 17, 14, 33, 14, 696, DateTimeKind.Local).AddTicks(6081),
                            CurrencyUnit = "TL",
                            MarketId = new Guid("de8bd1d1-3ea0-4b4f-9908-1e89419d88cc"),
                            Price = 590.00m,
                            ProductId = new Guid("085aeff8-9d2a-49f5-bc7d-1d4efa55a16f"),
                            Status = (byte)4,
                            Stock = 2400
                        });
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.TokenBlackList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TokenBlackLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Core.Entities.BaseIdentities.ExtendedIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Core.Entities.BaseIdentities.ExtendedIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NETDeveloperCaseStudy.Core.Entities.BaseIdentities.ExtendedIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Core.Entities.BaseIdentities.ExtendedIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Order", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Client", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Market", "Market")
                        .WithMany("Orders")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.OrderDetail", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Product", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.ProductMarket", b =>
                {
                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Market", "Market")
                        .WithMany("Products")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NETDeveloperCaseStudy.Entities.DbSets.Product", "Product")
                        .WithMany("Markets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Market", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NETDeveloperCaseStudy.Entities.DbSets.Product", b =>
                {
                    b.Navigation("Markets");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
